@using OA.WASM.Pages.Auth 
@using OA.WASM.Pages.Profile
@using OA.WASM.Pages.Notifications

<div class="sidenav-comp">

    <input type="checkbox" id="toggled" class="@Theme.Align-toggled" style="display:none" @attributes="@attr" />

    <!-- header area start -->
    <header>
        <label @onclick="ToggleNav">
            <i class="fas fa-bars @Theme.Align-sidebar-btn" id="SidebarBtn"></i>
        </label>
        
        <div class="@(Theme.Align)-area prod-name">
            <div @onclick="@(() => NavigateTo("/home"))" class="brand-text"> <span>IT S</span>tudios </div>
        </div>

        <div class="@((Theme.Align == "left")? "right" : "left" )-area">

            <div>
                <Logout></Logout>
            </div>
            <div>
                <ProfileLink />
            </div>
            <div>
                <UserNotifications />
            </div>
            <div class="resp-nav-link">
                <CultureSelect ThemeSelectEvent="ThemeSelected" ></CultureSelect>
            </div>
            <div class="resp-nav-link">
                <ThemeSelect ThemeSelectEvent="ThemeSelected"></ThemeSelect>
            </div>

        </div>
        @*<div class="right-area">
            
        </div>

        <div class="right-area">
            
        </div>*@

    </header>
    <!-- header area end -->
    <!-- sidebar start -->
    <div class="sidebar @Theme.Align-sidebar">

        <AuthorizeView Policy="administration-users">
            <Authorized>
                <div class="submenu-group @sub[1]">
                    <i class="fas fa-desktop"></i>
                    <span class="submenu-toggler" @onclick="@(() => ToggleSubMenu(1))"> @Localizer["Administration"] <i class="submenu-toggler-icon fa fa-chevron-down"></i>  </span>
                    <ul class="submenu">
                        <li><a href="/signupRequests"> @Localizer["Signup Requests"] </a></li>
                        <li><a href="/users"> @Localizer["Users"] </a></li>
                        <li><a href="/roles"> @Localizer["Roles"] </a></li>
                    </ul>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Policy="app-settings-control">
            <Authorized>
                <a href="/settings">
                    <i class="fas fa-sliders-h"></i>
                    <span>  @Localizer["Settings"] </span>
                </a>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Policy="reporting-control">
            <Authorized>
                <div class="submenu-group @sub[2]">
                    <i class="fas fa-book-reader"></i>
                    <span class="submenu-toggler" @onclick="@(() => ToggleSubMenu(2))"> @Localizer["Reporting"] <i class="submenu-toggler-icon fa fa-chevron-down"></i>  </span>
                    <ul class="submenu">
                        <li><a href="/Reporting"> @Localizer["Table Reports"] </a></li>
                        <li><a href="/TextTemplates"> @Localizer["Template Reports"] </a></li>
                    </ul>
                </div>
            </Authorized>
        </AuthorizeView>


        <AuthorizeView Policy="audeting-access">
            <Authorized>
                <a href="/Auditing">
                    <i class="fa fa-history"></i>
                    <span> @Localizer["Audeting"] </span>
                </a>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Policy="error-log-access">
            <Authorized>
                <a href="/ErrorsLog">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span> @Localizer["Errors Log"] </span>
                </a>
            </Authorized>
        </AuthorizeView>


        <AuthorizeView Policy="push-notification-control">
            <Authorized>
                <a href="/PushNotifications">
                    <i class="fas fa-bell"></i>
                    <span> @Localizer["Push Notification"] </span>
                </a>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Policy="indexes-control">
            <Authorized>
                <div class="submenu-group @sub[3]">
                    <i class="fas fa-database"></i>
                    <span class="submenu-toggler" @onclick="@(() => ToggleSubMenu(3))"> @Localizer["Indexes"] <i class="submenu-toggler-icon fa fa-chevron-down"></i>  </span>
                    <ul class="submenu">
                        <li><a href="/Cities"> @Localizer["Cities"] </a></li>
                    </ul>
                </div>
            </Authorized>
        </AuthorizeView>

        <div class="resp-sidenav-link">
            <CultureSelect></CultureSelect>
        </div>
        <div class="resp-sidenav-link">
            <ThemeSelect ThemeSelectEvent="ThemeSelected"></ThemeSelect>
        </div>
    </div>
    <!-- sidebar end -->
</div>

@code{

    [Inject]
    IStringLocalizer<CommonResources> Localizer { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [CascadingParameter]
    public Theme Theme { get; set; }


    [Parameter]
    public EventCallback<Theme> ThemeSelectEvent { get; set; }

    IEnumerable<KeyValuePair<string, object>> attr = new List<KeyValuePair<string, object>>() { new KeyValuePair<string, object>("checked", "checked") };

    List<string> sub = new List<string>() { string.Empty, string.Empty, string.Empty, string.Empty, string.Empty };

    public void ToggleSubMenu(int i)
    {
        sub[i] = (string.IsNullOrEmpty(sub[i])) ? "submenu-open" : string.Empty;
    }

    public void NavigateTo(string link, bool forceLoad = false)
    {
        NavigationManager.NavigateTo(link, forceLoad);
    }

    public void CloseNav()
    {
        attr = new List<KeyValuePair<string, object>>() { new KeyValuePair<string, object>("checked", "checked") };
        StateHasChanged();
    }

    public void ToggleNav()
    {
        if (attr.Count() > 0)
            attr = new List<KeyValuePair<string, object>>();
        else
            attr = new List<KeyValuePair<string, object>>() { new KeyValuePair<string, object>("checked", "checked") };
        StateHasChanged();
    }

    public async void ThemeSelected(Theme selectedTheme)
    {

        await ThemeSelectEvent.InvokeAsync(selectedTheme);
    }

}